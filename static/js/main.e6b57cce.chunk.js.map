{"version":3,"sources":["config.js","components/Style.js","components/Search.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","styled","input","_templateObject","Button","button","_templateObject2","SaveButton","_templateObject3","DefaultDiv","div","_templateObject4","CenterDiv","_templateObject5","Image","img","_templateObject6","Title","h1","_templateObject7","P","p","_templateObject8","LeftDiv","_templateObject9","RightDiv","_templateObject10","Search","_this","this","react_default","a","createElement","type","placeholder","value","props","location","onChange","handleChange","onClick","fetchWeather","React","Component","Display","date","Date","days","months","toUpperCase","saveLocation","className","getDay","getMonth","getDate","currentWeatherResult","map","result","src","concat","icon","alt","main","tomorrowWeatherResult","savedLocation","App","state","currentWeatherData","firstWeather","isSubmited","JSON","parse","localStorage","getItem","e","setState","target","fetch","API_KEY","method","then","res","json","data","console","log","list","weather","currentWeatherImg","catch","error","updateLocation","Array","from","Set","Object","toConsumableArray","setItem","stringify","components_Search","components_Display","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6b57cce.chunk.js","sourcesContent":["const API_KEY = \"b18101fe6777a8963c0bed86cfd6b8d7\";\r\n\r\nmodule.exports = API_KEY;\r\n","import styled from \"styled-components\";\r\n\r\nconst Input = styled.input`\r\n  border: none;\r\n  width: 250px;\r\n  height: 40px;\r\n  text-align: center;\r\n  font-size: 1.3rem;\r\n  outline: none;\r\n  margin-top: 15px;\r\n  border-radius: 5px;\r\n  float: right;\r\n  margin-right: 170px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  color: white;\r\n  background-color: #ff8008;\r\n  border-radius: 5px;\r\n  border: none;\r\n  width: 80px;\r\n  height: 40px;\r\n  font-size: 1rem;\r\n  bottom: 10px;\r\n  float: right;\r\n  margin-right: -350px;\r\n  margin-top: 15px;\r\n`;\r\n\r\nconst SaveButton = styled.button`\r\n  border: none;\r\n  background-color: white;\r\n  font-size: 2rem;\r\n  color: #ff8008;\r\n`;\r\n\r\nconst DefaultDiv = styled.div`\r\n  text-align: center;\r\n  height: 80px;\r\n  background-color: #ffe47a;\r\n`;\r\n\r\nconst CenterDiv = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 80px;\r\n  height: 80px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  float: left;\r\n  font-size: 1.5rem;\r\n  margin-left: 30px;\r\n`;\r\n\r\nconst P = styled.p`\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nconst LeftDiv = styled.div`\r\n  float: left;\r\n  margin-left: 25rem;\r\n`;\r\n\r\nconst RightDiv = styled.div`\r\n  float: right;\r\n  margin-right: 25rem;\r\n`;\r\n\r\nexport {\r\n  Input,\r\n  Button,\r\n  DefaultDiv,\r\n  Image,\r\n  Title,\r\n  CenterDiv,\r\n  P,\r\n  LeftDiv,\r\n  RightDiv,\r\n  SaveButton\r\n};\r\n","import React from \"react\";\r\nimport { Input, Button, DefaultDiv, Title, RightDiv } from \"./Style\";\r\n// import Button from \"./Style\";\r\n\r\n// Search includes two elements.\r\n// Fist, text area which user can type the location.\r\n// Second, when user submits and it triggers API call\r\n\r\nclass Search extends React.Component {\r\n  render() {\r\n    return (\r\n      <DefaultDiv>\r\n        <Title>Weather App</Title>\r\n\r\n        <Input\r\n          type=\"type\"\r\n          placeholder=\"Type the location\"\r\n          value={this.props.location}\r\n          onChange={this.props.handleChange}\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          onClick={() => this.props.fetchWeather(this.props.location)}\r\n        >\r\n          Get Weather\r\n        </Button>\r\n      </DefaultDiv>\r\n    );\r\n  }\r\n}\r\nexport default Search;\r\n\r\n// if this.props.fetchWeather(argu) it evcuates function right away, so should give () => to evacuate when it needs.\r\n","import React from \"react\";\r\nimport { Image, CenterDiv, P, LeftDiv, RightDiv, SaveButton } from \"./Style\";\r\n\r\n// Display class component displays weather data from parent component\r\nclass Display extends React.Component {\r\n  render() {\r\n    const date = new Date();\r\n    var days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n\r\n    return (\r\n      <CenterDiv>\r\n        <h2>Weather for {this.props.location.toUpperCase()}</h2>\r\n        <SaveButton\r\n          onClick={this.props.saveLocation}\r\n          className=\"fas fa-bookmark\"\r\n        />\r\n        <i />\r\n        <LeftDiv>\r\n          <P>\r\n            {days[date.getDay()]}, {months[date.getMonth()]} {date.getDate()}\r\n          </P>\r\n          {this.props.currentWeatherResult.map(result => (\r\n            <div>\r\n              <Image\r\n                src={`http://openweathermap.org/img/w/${result.icon}.png`}\r\n                alt=\"weather icon\"\r\n              />\r\n              <P>{result.main}</P>\r\n            </div>\r\n          ))}\r\n        </LeftDiv>\r\n        <RightDiv>\r\n          <P>\r\n            {days[date.getDay() + 1]}, {months[date.getMonth()]}{\" \"}\r\n            {date.getDate() + 1}\r\n          </P>\r\n          {this.props.tomorrowWeatherResult.map(result => (\r\n            <div>\r\n              <Image\r\n                src={`http://openweathermap.org/img/w/${result.icon}.png`}\r\n                alt=\"weather icon\"\r\n              />\r\n              <P>{result.main}</P>\r\n            </div>\r\n          ))}\r\n        </RightDiv>\r\n        <h2>\r\n          Saved Location :\r\n          {this.props.savedLocation.map(location => (\r\n            <button onClick={() => this.props.fetchWeather(location)}>\r\n              {location}\r\n            </button>\r\n          ))}\r\n        </h2>\r\n      </CenterDiv>\r\n    );\r\n  }\r\n}\r\nexport default Display;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Search from \"./components/Search\";\r\nimport Display from \"./components/Display\";\r\nimport API_KEY from \"./config\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    location: \"\",\r\n    currentWeatherData: [],\r\n    firstWeather: [],\r\n    isSubmited: false,\r\n    savedLocation: JSON.parse(localStorage.getItem(\"location\")) || []\r\n  };\r\n\r\n  // Update location as typed\r\n  handleChange = e => {\r\n    this.setState({ location: e.target.value });\r\n  };\r\n\r\n  // handleSubmit = e => {\r\n  //   e.preventDefault();\r\n  // };\r\n\r\n  // This func does API call with the location user typed, and saves fetched data into state as weatherData\r\n  fetchWeather = location => {\r\n    fetch(\r\n      `http://api.openweathermap.org/data/2.5/forecast?q=${location}&APPID=${API_KEY}`,\r\n      {\r\n        method: \"GET\"\r\n      }\r\n    )\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        this.setState({\r\n          currentWeatherData: data.list[0].weather,\r\n          firstWeather: data.list[5].weather,\r\n          currentWeatherImg: data.list[0].weather.icon,\r\n          isSubmited: true,\r\n          location\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // Using localStorage to save location like bookmark for user\r\n  saveLocation = () => {\r\n    const updateLocation = Array.from(\r\n      new Set([...this.state.savedLocation, this.state.location])\r\n    );\r\n    this.setState({\r\n      savedLocation: updateLocation\r\n    });\r\n    localStorage.setItem(\"location\", JSON.stringify(updateLocation));\r\n  };\r\n\r\n  // Set is an handle that can't take an duplicated element!!!\r\n\r\n  // getLocation = () => {\r\n  //   localStorage.getItem(\"location\");\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Search\r\n          location={this.state.location}\r\n          fetchWeather={this.fetchWeather}\r\n          handleChange={this.handleChange}\r\n        />\r\n        {this.state.isSubmited && (\r\n          <Display\r\n            location={this.state.location}\r\n            saveLocation={this.saveLocation}\r\n            savedLocation={this.state.savedLocation}\r\n            currentWeatherResult={this.state.currentWeatherData}\r\n            tomorrowWeatherResult={this.state.firstWeather}\r\n            fetchWeather={this.fetchWeather}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}